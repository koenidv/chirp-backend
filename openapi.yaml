openapi: "3.0.0"
info:
  version: "1.0.0"
  title: "Chirp API"
  description: Backend for Chirp - A Twitter clone

servers:
  - url: https://api.thechirp.de/v1
    description: Production v1 API
  - url: https://sandbox.api.thechirp.de/v1
    description: Sandbox v1 API

paths:
  #
  # Auth
  #
  /auth/register:
    post:
      summary: Register a new auth account
      security: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  description: Unique email identifier for this auth option
                  type: string
                  pattern: /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/
                password:
                  description: Password this auth option
                  type: string
      responses:
        200:
          description: Auth option created
        400:
          description: Bad request
        409:
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete auth user with no user associated
      description: If a user was created already, use delete user. This will also delete all associated auth options.
      responses:
        200:
          description: Auth option deleted
        401:
          description: Invalid identity token
  /auth/login:
    post:
      summary: Login using an auth account
      security: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  description: Email identifier for this auth option
                  type: string
                  pattern: /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/
                password:
                  description: Password this auth option
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  jwt:
                    description: Identity token for the user; expires after 15 minutes
                    type: string
                  refreshToken:
                    description: Refresh token for the user; expires after 1 year or session reset
                    type: string   
        401:
          description: Invalid credentials
  /auth/refresh:
    post:
      summary: Get a new identity token using a refresh token
      security: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - refreshToken
              properties:
                refreshToken:
                  description: Refresh token for the user
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  jwt:
                    description: New identity token for the user; expires after 15 minutes
                    type: string 
        401:
          description: Invalid refresh token
  /auth/signout:
    post:
      summary: Invalidate current session
      responses:
        200:
          description: Current session invalidated; will apply after next refresh
        401:
          description: Invalid identity token
  /auth/signout/all:
    post:
      summary: Invalidate all sessions for current user
      responses:
        200:
          description: User sessions invalidated; will apply after next refresh
        401:
          description: Invalid identity token
  /auth/resetpassword:
    post:
      summary: Request a password reset email
      security: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
              properties:
                email:
                  description: Email identifier for this auth option
                  type: string
                  pattern: /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/
      responses:
        200:
          description: Password reset email sent if user existed
    put:
      summary: Reset password using a password reset token
      security:
        - resetToken: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - newpassword
              properties:
                password:
                  description: New password
                  type: string
      responses:
        200:
          description: Password reset
        401:
          description: Invalid password reset token
  /auth/whoami:
    post:
      summary: Check your current identity
      responses:
        200:
          description: Your current identity
        401:
          description: Invalid identity toke
  #
  # User
  #
  /user:
    post:
      summary: Create a user and associate to the current auth account
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - displayname
              properties:
                username:
                  description: Unique username
                  type: string
                displayname:
                  description: Display name
                  type: string
      responses:
        200:
          description: User created
          content:
            application/json:
              schema:
                type: object
                required:
                  - jwt
                  - refreshToken
                  - user_id
                  - username
                  - displayname
                properties:
                  jwt:
                    description: Identity token for the user; expires after 15 minutes
                    type: string
                  refreshToken:
                    description: Refresh token for the user; expires after 1 year or session reset
                    type: string
                  user_id:
                    description: User ID
                    type: integer
                  username:
                    description: Chosen username
                    type: string
                  displayname:  
                    description: Chosen display name
                    type: string  
        400:
          description: Bad request, including prohibited or taken username
        401:
          description: Invalid identity token
    delete:
      summary: Delete user and associated auth account
      responses:
        200:
          description: User deleted
        401:
          description: Invalid identity token
    put:
      summary: Update user
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  description: Unique username
                  type: string
                displayname:
                  description: Display name
                  type: string
                bio:
                  description: User bio
                  type: string
      responses:
        200:
          description: User updated
        400:
          description: Bad request, including prohibited or taken username
        401:
          description: Invalid identity token
  /user/profileimage:
    put:
      summary: Update user profile image
      requestBody:
        content:
          mulipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        200:
          description: User profile image updated
        401:
          description: Invalid identity token
  /user/me:
    summary: Get current user
    get:
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:  
          description: Invalid identity token
  /user/{username}:
    summary: Get user by ID
    get:
      parameters:
        - name: username
          in: path
          description: Username
          required: true
          schema:
            type: string
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:  
          description: Invalid identity token
        404:
          description: User not found
    

components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          description: Internal user ID
          type: integer
        username:
          description: Username
          type: string
        displayname:
          description: Display name
          type: string
        profile_image_url:
          description: Profile image URL
          type: string
        bio:  
          description: User bio
          type: string
        created_at: 
          description: User creation timestamp
          type: string
          format: date-time
        count_tweets:
          description: Number of tweets
          type: integer
        count_followers:
          description: Number of followers
          type: integer
        count_followings:
          description: Number of followings
          type: integer
    Error:
      type: object
      required:
        - error
      properties:
        error:
          description: Error code
          type: string
        message:
          description: Short human readable error message
          type: string
        detail:
          description: Human readable error detail
          type: string
  securitySchemes:
    identityToken:
      description: User identity token as JWT
      type: http
      scheme: bearer
      bearerFormat: JWT
    resetToken:
      description: Password reset token as JWT
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - identityToken: []
